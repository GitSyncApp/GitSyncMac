
//TODO: load string in playground

var str:String = ""


str = "- [ ] this is a todo item\n" +
      "- [ ] another todo item here\n"


//str = "slider:focus button:disabled "
//let str = "abc123xyz"
var pattern:String = ""
//let pattern = "(?<=abc)(123)(?=abc)"
pattern = "\\- \\[( )\\] (.*?)\\n"
//pattern = "(\\w+?)\\:(\\w*?) "

//(?P<name>[\w\d\#\.]+?(?=\040|\:))(?P<state>\:[\w\d\:]*?(?=\040|$))?

//matche[1]
let theMatches = RegExpParser.matches(str,pattern)//hello, world
theMatches.count

enum ItemParts:Int{
    case bool = 1, content
}
var taskItems:[Dictionary<String,String>] = []
for match:NSTextCheckingResult in theMatches {
    match.numberOfRanges
    //let a = (str as NSString).substringWithRange(match.rangeAtIndex(0))
    let bool = (str as NSString).substringWithRange(match.rangeAtIndex(ItemParts.bool.rawValue))
    let content = (str as NSString).substringWithRange(match.rangeAtIndex(ItemParts.content.rawValue))
    let taskItem = ["bool":bool,"content":content]
    taskItems.append(taskItem)
}

/**
 * Returns a Markdown Task list as string
 * TODO: Dont add \n to the last item
 */
func sequence(taskItems:[Dictionary<String,String>])->String{
    var result = ""
    for taskItem in taskItems{
        result += "- [" + taskItem["bool"]! + "] " + taskItem["content"]! + "\n"
    }
    return result
}

sequence(taskItems)